
var documents = [{
    "id": 0,
    "url": "http://localhost:4000/404.html",
    "title": "error_404",
    "body": " Sorry the Page you are looking for doesnot exist ! : Back to Home "
    }, {
    "id": 1,
    "url": "http://localhost:4000/about",
    "title": "About",
    "body": ""
    }, {
    "id": 2,
    "url": "http://localhost:4000/blog/categories",
    "title": "Categories",
    "body": ""
    }, {
    "id": 3,
    "url": "http://localhost:4000/contact/",
    "title": "Contact",
    "body": ""
    }, {
    "id": 4,
    "url": "http://localhost:4000/",
    "title": "",
    "body": ""
    }, {
    "id": 5,
    "url": "http://localhost:4000/gallery/",
    "title": "Gallery",
    "body": "&lt;div class= col-lg-8 offset-md-2 &gt; &lt;div class= row &gt;&lt;div class= row &gt; &lt;div class= card &gt;  &lt;div class= card-title &gt; Mountains&lt;/div&gt;  &lt;div class= row &gt;  &lt;a href= http://localhost:4000/gallery/mountains. html &gt;   &lt;img class= img-thumbnail  alt= Mountains  src= http://localhost:4000/assets/img/gallery/mountains/1-thumbnail. jpg  /&gt;  &lt;/a&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/div&gt; "
    }, {
    "id": 6,
    "url": "http://localhost:4000/blog/",
    "title": "Blog",
    "body": ""
    }, {
    "id": 7,
    "url": "http://localhost:4000/get-started/",
    "title": "Get Started",
    "body": "Getting Started - How to use “devlopr-jekyll” theme: What’s Jekyll ?: If you aren’t familiar with Jekyll yet, you should know that it is a static site generator. It will transform your plain text into static websites and blogs. No more databases, slow loading websites, risk of being hacked…just your content. And not only that, with Jekyll you get free hosting with GitHub Pages! If you are a beginner we recommend you start with Jekyll’s Docs. Now, if you know how to use Jekyll, let’s move on to using this theme in Jekyll: Steps to create your blog using devlopr-jekyll and Host using Github Pages ::  Step 1.  Fork the repo - click here  Step 2. Use your-github-username. github. io as the new repo ( Replace your-github-username with yours). Remember if you use the name other than your-github-username. github. io , your blog will be built using gh-pages branch.   Step 3. Clone the new repo locally to make changes :   $ git clone https://github. com/yourusername/yourusername. github. io $ cd yourusername. github. io $ code .  Step 4. Open the files using VSCode and edit _config. yml and edit with your details:  _config. yml file - replace with your own details _posts - Add your blog posts here _includes - You can replace the contents of the files with your data. (contains widgets) _assets/img - Add all your images here  Step 5 - Install the development requirements: Set up local development environment:  Git Ruby and Bundler VSCodeWe need ruby and bundler to build our site locally. After installation check if its working: For ruby : $ ruby -vruby 2. 5. 1p57 (2018-03-29 revision 63029) [x86_64-linux-gnu]For bundler : $ gem install bundler$ bundler -vBundler version 2. 1. 4Add jekyll : $ bundle add jekyllThis command will add the Jekyll gem to our Gemfile and install it to the . /vendor/bundle/ folder. You can check the jekyll version $ bundle exec jekyll -vjekyll 4. 0. 0 Step 6. Install the gem dependencies by running the following command $ bundle update$ bundle install Step 7. Serve the site locally by running the following command below: $ bundle exec jekyll serve --watchor you can also serve using : $ jekyll serveVisit http://localhost:4000 for development server  Adding Content: Start populating your blog by adding your . md files in _posts. devlopr-jekyll already has a few examples. YAML Post Example:: ---layout: posttitle: Sample Postauthor: Sujay Kundudate: '2019-05-21 14:35:23 +0530'category:    - jekyllsummary: This is the summary for the sample postthumbnail: sample. png---Hi ! This is sample post. YAML Page Example:: ---layout: pagetitle: Sample Pagemenus: headerpermalink: /sample-page/---Hi ! This is sample page. Editing stylesheet: You’ll only work with a single file to edit/add theme style: assets/css/main. scss. Deploy your Changes: Once happy with your blog changes. Push your changes to master branch.  Step 8. Push Your Local Changes $ git add . $ git commit -m  my new blog using devlopr-jekyll  $ git push origin masterVisit your Github Repo settings ! Enable master branch as Github Pages Branch :  Step 9. Deploy your Blog :  Congrats ! On your new shining Blog ! You can visit the blog using http://your-github-username. github. io. "
    }, {
    "id": 8,
    "url": "http://localhost:4000/gallery/mountains.html",
    "title": "Mountains",
    "body": "{% include gallery-layout. html gallery=site. data. galleries. mountains %} "
    }, {
    "id": 9,
    "url": "http://localhost:4000/search",
    "title": "Search",
    "body": ""
    }, {
    "id": 10,
    "url": "http://localhost:4000/shop/",
    "title": "Shop",
    "body": ""
    }, {
    "id": 11,
    "url": "http://localhost:4000/styleguide/",
    "title": "Styleguide",
    "body": " devlopr jekyll - Styleguide  Lets try the different text styles  Bold , Strong , Emphasis , Italic  Now, lets try different heading styles :  Hello in h1 ! Hello in h2 ! : Hello in h3 ! : Hello in h4 ! : Hello in h5 ! Hello in h6 ! Unordered List  List Item 1 List Item 2 List Item 3 List Item 4 List Item 5 Ordered List  List Item 1 List Item 2 List Item 3 List Item 4 List Item 5 This is a Block Quote, It can Expand Multiple Lines You can use the mark tag to highlight text.  This line of text is meant to be deleted text  This line of text will render as underlined This line of text is meant to be treated as fine print. This line rendered as bold text. This line rendered as italicized text. attr HTML             #     Heading     Heading     Heading     Heading     Heading     Heading     Heading     Heading     Heading                   1     Cell     Cell     Cell     Cell     Cell     Cell     Cell     Cell     Cell             2     Cell     Cell     Cell     Cell     Cell     Cell     Cell     Cell     Cell             3     Cell     Cell     Cell     Cell     Cell     Cell     Cell     Cell     Cell           YouTube Responsive Embed: Vimeo Responsive Embed: TED Responsive Embed: Twitch Responsive Embed: SoundCloud Embed: CodePen Embed: Syntax Highlighting: 'use strict';var markdown = require('markdown'). markdown;function Editor(input, preview) { this. update = function() {  preview. innerHTML = markdown. toHTML(input. value); }; input. editor = this; this. update();}You can add inline code just like this, E. g. . code { color: #fff; } pre { background-color: #f4f4f4; max-width: 100%; overflow: auto;}GitHub gist Embed: Input Style:  Twitter Embed : I just published “Deploying a blog using Jekyll and Github Pages with SSL certificate for Free” https://t. co/B3T3IQVU93 &mdash; Sujay Kundu (@SujayKundu777) June 29, 2018 Instagram Embed :  A post shared by Ahmad Ajmi (@ahmadajme) on Apr 2, 2018 at 2:18pm PDT "
    }, {
    "id": 12,
    "url": "http://localhost:4000/robots.txt",
    "title": "",
    "body": "      Sitemap: {{ “sitemap. xml”   absolute_url }}   "
    }, {
    "id": 13,
    "url": "http://localhost:4000/ocio/escape%20room/madrid/2020/11/16/darkproject_scaperoom/",
    "title": "The Dark Project Escape Room",
    "body": "2020/11/16 - Ayuda a Sherlock a demostrar su inocencia y descubre lo que se esconde tras las puertas de esta farmacia. "
    }, {
    "id": 14,
    "url": "http://localhost:4000/ocio/escape%20room/madrid/2020/10/23/lafarmacia_scaperoom/",
    "title": "La farmacia Escape Room",
    "body": "2020/10/23 - Ayuda a Sherlock a demostrar su inocencia y descubre lo que se esconde tras las puertas de esta farmacia. "
    }, {
    "id": 15,
    "url": "http://localhost:4000/jekyll/github%20pages/2020/09/15/github_pages-jekyll/",
    "title": "¡Tu web gratis con Github Pages y Jekyll!",
    "body": "2020/09/15 - Jekyll permite crear tu página. "
    }, {
    "id": 16,
    "url": "http://localhost:4000/jekyll/github%20pages/2020/09/15/github_pages/",
    "title": "¡Crea tu web gratis con Github Pages!",
    "body": "2020/09/15 - Github Pages permite convertir cualquier repositorio en una página web con solo un par de clicks. Si estás buscando un lugar en el que crear tu portfolio con proyectos personales o de trabajo, o si quieres crear tu blog o web de empresa y no sabes por donde empezar, quizá este sea tu sitio. Es probable que no quieras pagar por un servicio de hosting, dominio y todo lo que implica tener tu web “en el aire”. Entonces este post es para ti. ¿Por qué debería tener una web?: La verdad es que en el mundo en el que vivimos, es difícil imaginar que podría no beneficiarte de tener tu propia web. Puedes querer mostrar tu portfolio a futuras empresas o como freelance. Mostrar tus proyectos de estudiante y compartirlos con la comunidad universitaria. Puedes querer tener tu propio blog donde contar los lugares que te gustan o qué estás haciendo. También puedes querer hacer publicidad o compartir tu negocio y abrirte a la venta online… Una página web es el modo de conectarte con el mundo y una gran herramienta de comunicación. Es el modo de crear, construir y controlar tu imagen online. Además cuanto menos tiempo gastes en consstruir esa web, más tiempo tendrás para construir tu imagen y llegar a la gente que te interesa. Una web, puede ayudarte a alcanzar y superar a tus competidores. Y, todos sabemos que no es lo más sencillo de crear si no sabes lo que estás haciendo. Si estás empezando a informarte sobre como crear tu propia web, seguro que has oído hablar de algunas de las opciones mas sencillas, por un lado está Wordpress, pero yo quiero presentarte a Github. Wordpress es la herramienta para principiantes por excelencia, para los que sólo quieren configurar algunos parámetros y escribir. Es una gran herramienta para las personas que quieren una web rápida sin tener ningún conocimiento técnico. El problema con Wordpress es que su plan gratuito no te deja configurar prácticamente nada. Es demasiado obvio que estamos usando Wordpress en nuestra página, tienes el logo de wordpress en todas las páginas, la direccion acaba con wordpress. com y las plantillas y personalización es mínima. Si eres una persona un poco técnica seguro que conocerás Github como gestor de repositorio de código. Si eres una persona técnica que le gusta programar y tener sus proyectos en un mismo sitio seguro que tienes una cuenta de Github, con al menos un proyecto. Lo que puede que no conozcas es la funcionalidad de Github Pages, por qué no crear tu web en Github y alojarla directamente ahí, en tu repositorio, sin necesitar nada más. Si quieres mantener el código de tu web en secreto, quizá este artículo debería acabar aquí para ti. Si por el contrario te gusta colaborar con la filosofía de Código Libre y ayudar e inspirar a todos los que vengan detrás de ti. Esa es la gran idea de Github, compartir tu conocimiento y trabajo. Cuando tu compartes tus proyectos en Github, la gente puede ver tu código, ver qué haces y cómo lo haces, e incluso sugerirte mejoras. Sería la gran biblioteca del código hoy en día. La mayoría de las personas técnicas ya usan Git y/o Github de algún modo. Tener tu web en el mismo sitio es un plus, y además ayudará a subir las contribuciones en tu perfil =) Si eres totalmente nuevo a todo lo que estoy contando, quizá deberías echar un vistazo a “Comenzar con Git y Github: Guía completa para novatos” En ese artículo puedes aprender lo básico de Git y Github, conceptos como “repositorio” o “rama”. De aquí en adelante asumiré que conoces lo básico. Empecemos con nuestra web: Hay dos modos de empezar tu página web. Puede que comiences totalmente desde cero, no tienes nada, ni index. hmtl. O puedes tener una web o plantilla html ya creada, pero no sabes como subirla a Github y así poder tenerla online de forma gratuita. Ya tengo los ficheros de mi web, pero no sé qué hacer con ellos: Este es el caso más sencillo. Github hace todo el trabajo por ti. Asumiendo que ya tienes una cuenta de Github y que sabes lo que es un repositorio, sino, deberías echar un vistazo a mi anterior artículo sobre como empezar con Git y Github. Digamos que nuestro repositorio será como el cascarón de un huevo, es donde nuestro proyecto vivie. Ahí puedes organizarlo por carpetas, añadir imagenes, videos, cualquier cosa que tu proyecto necesite puede estar en el repositorio. Si todavía no lo has hecho, inicializa tu proyecto con un repositorio, o puedes crear un repositorio y añadir tus ficheros. Si en el directorio raíz ya tienes un fichero llamado index. html Github sabrá perfectamente qué hacer. Ahora vas a aprender a aprovecharte de Github Pages. Tienes que ir a tu repositorio de Github y hacer click en Settings Una vez que estamos en la página de configuración hay que hacer scroll en la página hacia abajo hasta llegar a la seccion de Github Pages Ahora desplega el menú de Source y selecciona la opción de Master branch. Esto hará que nuestra página tome como rama para mostrar nuestra página principal la rama master del repositorio, que sería como la rama principal por defecto del repositorio. En este caso verás una notificacion como que tu sitio está listo para ser publicado. Sé paciente, puede tomar un par de minutos, entonces refresca la página y verás que la notificación ha cambiado y te dice que tu página ya ha sido publicada con la direccion web en la que podrás ver tu página. Prueba a hacer click en el link y ¡MAGIA! ¡¡Ya tienes tu web gratis publicada!! No sé ni por donde empezar: No voy a explicar como hacer una web, ni las diferentes librerias de diseño que puedes usar, sino que me voy a enfocar en lo básico. Prefiero que conozcas como crear algo de cero usando la herramienta que estoy presentando aquí y que con todo el tiempo que dispongas y las ganas que le pongas explores todo este mundo de diseño y programación web. Lo que voy a explicar aquí es como si eres totalmente nuevo crear una web en Github Pages. Lo primero vamos a crear un repositorio Rellena los datos de tu repositorio, nombre, descripcion y selecciona la opción de inicializiar el repositorio con un README Initialize this repository with a README y entonces dile que lo cree Create repository Ahora al igual que en la sección anterior tienes que ir a Settings, cerca de la parte alta de la página al lado derecho de la pantalla Una vez que estés aquí, haz scroll en la página hacia abajo hasta llegar a la sección de Github Pages Ahora desplega el menú de Source y selecciona la opción de Master branch. Esto hará que nuestra página tome como rama para mostrar nuestra página principal la rama master del repositorio, que sería como la rama principal por defecto del repositorio. En este caso verás una notificacion como que tu sitio está listo para ser publicado. Sé paciente, puede tomar un par de minutos, entonces refresca la página y verás que la notificación ha cambiado y te dice que tu página ya ha sido publicada con la direccion web en la que podrás ver tu página. Ahora haz click en el link y podrás ver tu página. ¡Enhorabuena! ¡Ya estás online! ¿Pero esto no es un poco feo?: Te doy la razón, esta web es un poco bastante fea, si vuelves a tu repositorio podrás ver que lo que se está mostrando es lo que hay en tu fichero README. md. Si quieres hacer algunos cambios, puedes ir a la parte de arriba y editar tu fichero, para editar lo que quieres que la gente vea. Para hacer esto, vuelve al repositorio, haz click en el icono del lapiz que puedes encontrar en el fichero README y modíficalo a tu antojo. Una vez que hayas acabado de modificar el fichero README, no te olvides de hacer commit del archivo. Si no lo haces perderás todo el trabajo. Aquí también puedes añadir un pequeño mensaje de commit para explicar los cambios que has hecho. Ten en cuenta que estás modificando un fichero de tipo Markdown. Si no sabes mucho sobre este formato, puedes dirigirte a este enlace para ver la de opciones que te ofrece. Este tipo de ficheros es en realidad un lenguaje de programación, este post está escrito en formato Markdown, donde puedes añadir el formato de los elementos mientras escribes en texto plano. Incluye funcionalidades para añadir texto, links, imágenes, colores e incluso formato de código. Aquí puedes encontrar la Guía Gásica de la sintaxis de Markdown ¡Ahora vuelve a tu web, y comprueba como queda con los últimos cambios! Ten en cuenta que a veces puede tomar varios minutos hasta que los cambios aparecen en la web publicada. También puedes tener algunos problemas con la cache de tu navegador, borrar la cache del navegador o abrir el enlace en un navegador con sesión oculta puede ayudar a ver los cambios antes. ¿No se puede hacer nada mejor?: Pues sí, sí se puede hacer mejor, a partir de aquí se pone interesante. Pero eso lo explicaré en otro post en el que os presentare Jekyll, framework con el que he creado yo esta página. Mientras espero que este tutorial os haya servido para abrir el apetito. ¡Gracias por leer!=) "
    }, {
    "id": 17,
    "url": "http://localhost:4000/opinion/2020/09/09/teletrabajo/",
    "title": "Medio año de teletrabajo: ¿es el futuro?",
    "body": "2020/09/09 - El éxito es la suma de pequeños esfuerzos repetidos un día sí y otro también Robert Collier Muchos de nosotros en estos meses nos hemos enfrentado a esa realidad conocida como teletrabajo. Puede que la apoyaramos, o que prefiriesemos el trabajo de oficina. Puede que nos haya dado facilidades pero también hemos perdido contacto social y otros beneficios. Puede que te haya permitido desarrollar todas tus funciones al 100% o más, o por el contrario veas que hay tareas que no puedes realizar desde tu casa. Son muchas las variantes y los matices que este modelo de trabajo puede tener, y los puntos de vista subjetivos de una medida, cuanto menos a debate. Yo no soy una experta en el campo, ni en psicología, pero sí que siempre he sido su defensora y ahora quiero hacer su evaluación. Así que, ¡allá vamos! ¿Qué he experimentado en todo este tiempo? "
    }, {
    "id": 18,
    "url": "http://localhost:4000/git/github/2020/09/01/git-and-github/",
    "title": "Cómo empezar con Git y Github: guía completa para principiantes.",
    "body": "2020/09/01 - Es muy fácil comenzar con Git y si eres rápido leyendo este artículo puedes tener tu perfil creado en menos de 15 minutos desde ahora. Si has escuchado hablar de Git y Github pero aún no sabes muy bien qué es. Si vas a empezar a colaborar en un equipo o estas desarrollando un proyecto propio. Si acabas de descubrir que todos los grandes gurús de la tecnología hacen referencia a su perfil de Github y crees que tu necesitas el tuyo para que te empiecen a tomar en serio. … O si quieres colaborar con tu primer proyecto de código libre Entonces este post es para ti. Si terminas este artículo, puedes realizar el tour completo para comprender Git y Github. Clonar un proyecto, crear una rama, hacer cambios, crear un pull request o subirlo a tu repositorio propio. De camino conoceras un poco más sobre los comandos de la terminal, como usarlos y editar un fichero markdown (. md). Este artículo es un repaso por todo lo básico. Hay mucho trabajo más allá para convertirse en un pro de Git y Github, pero por algo se empieza. Con lo que te presento en este artículo tendrás lo suficiente para empezar a desenvolverte en el mundillo de la gestión de código. Dejaré todos los comandos más avanzados para posts más adelante. Así que, ¡allá vamos! ¿Qué es Git? ¿Qué es Github?: Git es el software de control de versiones utilizado por prácticamente todo el mundo a día de hoy, desde desarrolladores hasta diseñadores. Github es la plataforma para alojar el código más utilizada en la actualidad. Se trata de una plataforma social donde puedes seguir y leer código de casi cualquier programador, probar y descubrir nuevas tecnologías. Es un lugar donde aprender y colaborar. Puedes almacenar código de tus proyectos o de la universidad, y también puedes colaborar en proyectos que te inspiren o modificarlos con tu estilo. ¡Incluso puedes crear una página web gratuita directamente desde un repositorio! Si te interesa profundizar, échale un ojo a este artículo "
    }, {
    "id": 19,
    "url": "http://localhost:4000/jekyll/github/seo/2020/09/01/seo-jekyll/",
    "title": "Posicionar tu página de Jekyll.",
    "body": "2020/09/01 - "
    }, {
    "id": 20,
    "url": "http://localhost:4000/jekyll/github%20pages/2020/08/13/multilanguage-jekyll/",
    "title": "Multiples Idiomas para Jekyll y Github Pages!",
    "body": "2020/08/13 - En este post voy a explicar como añadir la funcionalidad de multi-idioma a tu plantilla de Jekyll usando Github Pages. Para añadir esta funcionalidad a nuestra web lo mejor es usar uno de los plugins que existen, pero Github no soporta todos los plugins, en este enlace podeis encontrar los plugins soportados en Github. Por lo que puede que tengamos nuestra página funcionando en local pero luego cuando subamos nuestra página cause errores de compilación durante el proceso de build. Un modo de conseguir que nuestra página funcione es saltarnos ese proceso de build y subiendo nuestra página ya compilada a la rama master de nuestro proyecto, y mantener el control de versiones en otra rama a parte. jekyll-multiple-laguages plug-in: Hay varios modos de instalar el plugin jekyll-multiple-languages. Si necesitáis más información podeis dirigiros al repositorio del proyecto. ¡Buscan colaboradores! Usando una gema de Ruby: En mi caso he elegido instalarlo a través de la gema de Ruby. Para ello es necesario añadir la siguiente linea al archivo Gemfile gem 'jekyll-multiple-languages-plugin'Una vez añadida la gema, hay que ejecutar: $ bundle installO instalar la gema concreta: $ gem install jekyll-multiple-languages-pluginPara activar el plugin añadirlo al fichero de Jekyll _config. yml, bajo la opcion de plugins: plugins: - jekyll-multiple-languages-pluginComo un submodulo de Git: En algunos casos, dependiendo del tema que se use puede haber problemas con instalar el plugin como gema. Para evitar estos problemas se puede optar por añadir el plugin como submódulo. Para ello hay que dirigirse al directorio raíz del proyecto y ejecutar: $ git submodule add git://github. com/screeninteraction/jekyll-multiple-languages-plugin. git _plugins/multiple-languagesPara actualizarlo, cuando sea necesario habría que dirigirse a: $ cd _plugins/multiple-languages$ git pull origin masterConfiguración del fichero _config. yml: Una vez instalado el plugin, hay que añadir los idiomas que queramos en nuestro fichero de configuracion _config. yml. # Multi-Language configlanguages: [ es ,  en ]default_lang:  es exclude_from_localizations: [ assets ,  gallery ,  _sass ]También podemos especificar cual será nuestro idioma por defecto. En caso de no añadir esa variable se seleccionará por defecto el primero de la lista de idiomas. Otra funcionalidad a tener cuenta es decir qué directorios no vamos a replicar por cada idioma, de este modo eliminaremos redundancias posibles y replicar ficheros que son iguales en todos los idiomas. Estos directorios serán aquellos en los que tengáis imágenes u otros recursos comunes. Estructura de directorios: Ya está todo configurado, es la hora de añadir la estructura de ficheros para construir nuestra página con los diferentes idiomas. En un proyecto de Jekyll sin multi-idioma, se compilan los ficheros . md sobre la estructura base, en el caso de los posts, sería bajo la carpeta _posts. En caso de tener multiples idiomas habría que crear ese directorio por cada idioma. Igual para cualquier fichero que cambiemos por idioma. En primer lugar, en el directorio raíz hay que crear una carpeta con el nombre _i18n y añadir subcarpetas por cada uno de los idiomas usando los mismos nombres que hemos usado en nuestro fichero de configuración. Vuestro directorio de ficheros debería añadir una estructura similar a esta: _i18n│  en. yml│  es. yml  │└───es│  └───pagename│    │  file111. txt└───en│  └───pagename│  │  file111. txt│  . . . Configuracion idiomas. yml: Estos ficheros son a los que se llamara cuando queramos traducir un texto concreto. Por ejemplo, los textos del menú de navegación. Estos ficheros deberían ser similares a estos ejemplos: es. ymlglobal: site_title: Raquel Fishes web site_description: Sitio Web de Raquel Fisheslangs: english: Ingles spanish: Español en: EN es: ESnavbar: about: Sobre mí contact: Contacto blog: Blogen. ymlglobal: site_title: Raquel Fishes website site_description: Raquel Fishes personal pagelangs: english: English spanish: Spanish en: EN es: ESnavbar: about: About me contact: Contact blog: BlogNavegar por paginas multi-idioma: La navegación por nuestra página multi-idioma va a añadir automáticamente a nuestra web la subextensión correspondiente al idioma en el que estemos navegando cuando no se trate del idioma por defecto. Por lo que las direcciones que veremos en el explorador serán: Idioma por defecto (Español)raquelfishes. githug. io/aboutlocalhost:4000/aboutPagina en otro idioma (Inglés)raquelfishes. githug. io/en/aboutlocalhost:4000/en/aboutIntercambio de idiomas: Si añadimos la funcionalidad de multi-idioma, también hay que añadir un botón de switch para cambiar entre idiomas. Eso lo puedes hacer de forma bastante sencilla. En mi caso lo he añadido con iconos de idioma en la barra de navegación. &lt;li class= nav-item &gt; {% if site. lang ==  es  %}  {% capture link1 %}{{ site. baseurl_root }}/en{{ page. url }}{% endcapture %}   &lt;a href= {{ link1 }}  class= lang-switcher spanish  title= Website en español &gt;&lt;img src= en. webp /&gt;{% t global. en %}&lt;/a&gt; {% elsif site. lang ==  en  %}  {% capture link2 %}{{ site. baseurl_root }}{{ page. url }}{% endcapture %}   &lt;a href= {{ link2 }}  class= lang-switcher english  title= English Website &gt;&lt;img src= es. webp /&gt;{% t global. es %}&lt;/a&gt; {% endif %}&lt;/li&gt;Publicación automática: Este es el punto más controvertido de todo el desarrollo. Hasta aquí puedes tener tu web perfectamente funcional en local, pero que no puedas publicarla en Github Pages. Así que vamos a ir paso a paso Crear una rama y ponerla como default: En primer lugar vamos a cambiar nuestra rama principal, para guardar todo nuestro historial de código a una rama diferente a master. Puede que ya trabajes con una rama de desarrollo y otra de procucción, pero si no es así es el momento de crearla. Ejecuta los siguientes comandos en tu repositorio en local, en mi caso mi rama para guardar el historial la he llamado source: $ git checkout -b source master$ git push -u origin sourceLuego dirigete a tu repositorio de Github y configura esta rama recien creada como la rama por defecto del proyecto Github web &gt; your repository &gt; Settings &gt; Branches &gt; Default branch Rakefile: Si ya tenías un fichero de compilación de Rake luciría similar a: namespace :assets do task :precompile do  puts `bundle exec jekyll build` endendSimplemente compilaba como podemos compilar en nuestro local, pero eso ahora no funcionará porque Github no soporta el plugin que queremos que incorpore nuestro proyecto de Jekyll. Ahora nuestro fichero de Rake necesitamos que nos copie la página compilada ya a nuestra rama master y la suba tal cual, evitando que Github haga ese paso. Para ello nuestro fichero de compilación será: require  jekyll require  tmpdir require  rubygems # Auto publish# Change your GitHub reponameGITHUB_REPONAME =  username/username. github. io desc  Generate blog files task :generate do Jekyll::Site. new(Jekyll. configuration({   source    =&gt;  .  ,   destination  =&gt;  _site  })). processenddesc  Generate and publish blog to gh-pages task :publish =&gt; [:generate] do Dir. mktmpdir do |tmp|  cp_r  _site/.  , tmp  pwd = Dir. pwd  Dir. chdir tmp  system  git init   system  git config --local user. name username   system  git config --local user. email usermail   system  git add .  	 message =  Site updated at #{Time. now. utc} 	 system  git commit -m #{message. inspect}   system  git remote add origin https://github. com/#{GITHUB_REPONAME}. git   system  git push origin master --force   Dir. chdir pwd endendEn mi caso además he añadido la configuración de usuario y email. Simplemente copia y pega este código en tu fichero y reemplaza con tu usuario y repositorio. Si no tienes un fichero Rakefile simplemente crea uno y copia el código Ejecutar rake publish: Como último paso para publicar nuestra web en la rama master de nuestro repositori y que así seá la web que queremos que esté en producción. Simplemente ejecuta el comando: $ rake publish$ git pusho también: $ bundle exec rake publish$ git pushY haz push de tu proyecto completo, así sincronizaras los commits que también tengas en la rama de desarrollo. Para cerrar el tema…: La verdad es que desde el principio he querido tener esta web en dos idiomas. Mi lengua principal es el Español y considero que aunque como personas técnicas estamos acostumbrados a buscar todo en inglés, siempre se agradece encontrar documentación en tu propio idioma. He invertido bastante tiempo en conseguir configurar Jekyll en Github para poder tener ambos idiomas, buscando en muchos sitios, y el problema siempre llegaba a la hora de subirlo a Github… porque fallaba la build. Espero que este artículo así como su correspondiente también en inglés ayuden a otros a no perder tanto tiempo en esta funcionalidad… =) "
    }, {
    "id": 21,
    "url": "http://localhost:4000/jekyll/tutorial/2018/06/12/powerful-things-markdown-editor/",
    "title": "Powerful things you can do with the Markdown editor",
    "body": "2018/06/12 - There are lots of powerful things you can do with the Markdown editor. If you’ve gotten pretty comfortable with writing in Markdown, then you may enjoy some more advanced tips about the types of things you can do with Markdown! As with the last post about the editor, you’ll want to be actually editing this post as you read it so that you can see all the Markdown code we’re using. Special formatting: As well as bold and italics, you can also use some other special formatting in Markdown when the need arises, for example:  strike through ==highlight== *escaped characters*Writing code blocks: There are two types of code elements which can be inserted in Markdown, the first is inline, and the other is block. Inline code is formatted by wrapping any word or words in back-ticks, like this. Larger snippets of code can be displayed across multiple lines using triple back ticks: . my-link {  text-decoration: underline;}HTML: &lt;li class= ml-1 mr-1 &gt;  &lt;a target= _blank  href= # &gt;  &lt;i class= fab fa-twitter &gt;&lt;/i&gt;  &lt;/a&gt;&lt;/li&gt;CSS: . highlight . c {  color: #999988;  font-style: italic; }. highlight . err {  color: #a61717;  background-color: #e3d2d2; }JS: // alertbar later$(document). scroll(function () {  var y = $(this). scrollTop();  if (y &gt; 280) {    $('. alertbar'). fadeIn();  } else {    $('. alertbar'). fadeOut();  }});Python: print( Hello World )Ruby: require 'redcarpet'markdown = Redcarpet. new( Hello World! )puts markdown. to_htmlC: printf( Hello World ); Reference lists: The quick brown jumped over the lazy. Another way to insert links in markdown is using reference lists. You might want to use this style of linking to cite reference material in a Wikipedia-style. All of the links are listed at the end of the document, so you can maintain full separation between content and its source or reference. Full HTML: Perhaps the best part of Markdown is that you’re never limited to just Markdown. You can write HTML directly in the Markdown editor and it will just work as HTML usually does. No limits! Here’s a standard YouTube embed code as an example: "
    }, {
    "id": 22,
    "url": "http://localhost:4000/jekyll/tutorial/2018/06/12/first-mass-produced/",
    "title": "The first mass-produced book to deviate from a rectilinear format",
    "body": "2018/06/12 - The first mass-produced book to deviate from a rectilinear format, at least in the United States, is thought to be this 1863 edition of Red Riding Hood, cut into the shape of the protagonist herself with the troublesome wolf curled at her feet. Produced by the Boston-based publisher Louis Prang, this is the first in their “Doll Series”, a set of five “die-cut” books, known also as shape books — the other titles being Robinson Crusoe, Goody Two-Shoes (also written by Red Riding Hood author Lydia Very), Cinderella, and King Winter. An 1868 Prang catalogue would later claim that such “books in the shape of a regular paper Doll… originated with us”.  It would seem the claim could also extend to die cut books in general, as we can’t find anything sooner, but do let us know in the comments if you have further light to shed on this! Such books are, of course, still popular in children’s publishing today, though the die cutting is not now limited to mere outlines, as evidenced in a beautiful 2014 version of the same Little Red Riding Hood story. The die cut has also been employed in the non-juvenile sphere as well, a recent example being Jonathan Safran Foer’s ambitious Tree of Codes. As for this particular rendition of Charles Perrault’s classic tale, the text and design is by Lydia Very (1823-1901), sister of Transcendentalist poet Jones Very. The gruesome ending of the original - which sees Little Red Riding Hood being gobbled up as well as her grandmother - is avoided here, the gore giving way to the less bloody aims of the morality tale, and the lesson that one should not disobey one’s mother. "
    }, {
    "id": 23,
    "url": "http://localhost:4000/jekyll/tutorial/2018/06/12/education/",
    "title": "Education must also train one for quick, resolute and effective thinking.",
    "body": "2018/06/12 - There are lots of powerful things you can do with the Markdown editor If you’ve gotten pretty comfortable with writing in Markdown, then you may enjoy some more advanced tips about the types of things you can do with Markdown! As with the last post about the editor, you’ll want to be actually editing this post as you read it so that you can see all the Markdown code we’re using. Special formatting: As well as bold and italics, you can also use some other special formatting in Markdown when the need arises, for example:  strike through ==highlight== *escaped characters*Writing code blocks: There are two types of code elements which can be inserted in Markdown, the first is inline, and the other is block. Inline code is formatted by wrapping any word or words in back-ticks, like this. Larger snippets of code can be displayed across multiple lines using triple back ticks: . my-link {  text-decoration: underline;}If you want to get really fancy, you can even add syntax highlighting using Rouge.  Reference lists: The quick brown jumped over the lazy. Another way to insert links in markdown is using reference lists. You might want to use this style of linking to cite reference material in a Wikipedia-style. All of the links are listed at the end of the document, so you can maintain full separation between content and its source or reference. Full HTML: Perhaps the best part of Markdown is that you’re never limited to just Markdown. You can write HTML directly in the Markdown editor and it will just work as HTML usually does. No limits! Here’s a standard YouTube embed code as an example: "
    }, {
    "id": 24,
    "url": "http://localhost:4000/jekyll/tutorial/2018/06/12/acumulated-experience/",
    "title": "Accumulated experience of social living",
    "body": "2018/06/12 - The die cut has also been employed in the non-juvenile sphere as well, a recent example being Jonathan Safran Foer’s ambitious Tree of Codes. As for this particular rendition of Charles Perrault’s classic tale, the text and design is by Lydia Very (1823-1901), sister of Transcendentalist poet Jones Very. The gruesome ending of the original - which sees Little Red Riding Hood being gobbled up as well as her grandmother - is avoided here, the gore giving way to the less bloody aims of the morality tale, and the lesson that one should not disobey one’s mother. The first mass-produced book to deviate from a rectilinear format, at least in the United States, is thought to be this 1863 edition of Red Riding Hood, cut into the shape of the protagonist herself with the troublesome wolf curled at her feet. Produced by the Boston-based publisher Louis Prang, this is the first in their “Doll Series”, a set of five “die-cut” books, known also as shape books — the other titles being Robinson Crusoe, Goody Two-Shoes (also written by Red Riding Hood author Lydia Very), Cinderella, and King Winter. An 1868 Prang catalogue would later claim that such “books in the shape of a regular paper Doll… originated with us”.  It would seem the claim could also extend to die cut books in general, as we can’t find anything sooner, but do let us know in the comments if you have further light to shed on this! Such books are, of course, still popular in children’s publishing today, though the die cutting is not now limited to mere outlines, as evidenced in a beautiful 2014 version of the same Little Red Riding Hood story. "
    }, {
    "id": 25,
    "url": "http://localhost:4000/jekyll/2018/05/12/about-bundler/",
    "title": "About Bundler",
    "body": "2018/05/12 - gem install bundler installs the bundler gem through RubyGems. You only need to install it once - not every time you create a new Jekyll project. Here are some additional details: bundler is a gem that manages other Ruby gems. It makes sure your gems and gem versions are compatible, and that you have all necessary dependencies each gem requires. The Gemfile and Gemfile. lock files inform Bundler about the gem requirements in your site. If your site doesn’t have these Gemfiles, you can omit bundle exec and just run jekyll serve. When you run bundle exec jekyll serve, Bundler uses the gems and versions as specified in Gemfile. lock to ensure your Jekyll site builds with no compatibility or dependency conflicts. For more information about how to use Bundler in your Jekyll project, this tutorial should provide answers to the most common questions and explain how to get up and running quickly. "
    }, {
    "id": 26,
    "url": "http://localhost:4000/jekyll/tutorial/2018/01/12/we-all-wait-for-summer/",
    "title": "We all wait for summer",
    "body": "2018/01/12 - As I engage in the so-called “bull sessions” around and about the school, I too often find that most college men have a misconception of the purpose of education. Most of the “brethren” think that education should equip them with the proper instruments of exploitation so that they can forever trample over the masses. Still others think that education should furnish them with noble ends rather than means to an end. It seems to me that education has a two-fold function to perform in the life of man and in society: the one is utility and the other is culture. Education must enable a man to become more efficient, to achieve with increasing facility the ligitimate goals of his life. "
    }, {
    "id": 27,
    "url": "http://localhost:4000/jekyll/tutorial/2018/01/12/tree-of-codes/",
    "title": "Tree of Codes",
    "body": "2018/01/12 - The first mass-produced book to deviate from a rectilinear format, at least in the United States, is thought to be this 1863 edition of Red Riding Hood, cut into the shape of the protagonist herself with the troublesome wolf curled at her feet. Produced by the Boston-based publisher Louis Prang, this is the first in their “Doll Series”, a set of five “die-cut” books, known also as shape books — the other titles being Robinson Crusoe, Goody Two-Shoes (also written by Red Riding Hood author Lydia Very), Cinderella, and King Winter. As for this particular rendition of Charles Perrault’s classic tale, the text and design is by Lydia Very (1823-1901), sister of Transcendentalist poet Jones Very. The gruesome ending of the original — which sees Little Red Riding Hood being gobbled up as well as her grandmother — is avoided here, the gore giving way to the less bloody aims of the morality tale, and the lesson that one should not disobey one’s mother.  It would seem the claim could also extend to die cut books in general, as we can’t find anything sooner, but do let us know in the comments if you have further light to shed on this! Such books are, of course, still popular in children’s publishing today, though the die cutting is not now limited to mere outlines, as evidenced in a beautiful 2014 version of the same Little Red Riding Hood story. An 1868 Prang catalogue would later claim that such “books in the shape of a regular paper Doll… originated with us”. The die cut has also been employed in the non-juvenile sphere as well, a recent example being Jonathan Safran Foer’s ambitious Tree of Codes. "
    }, {
    "id": 28,
    "url": "http://localhost:4000/jekyll/tutorial/2018/01/12/red-riding/",
    "title": "Red Riding Hood",
    "body": "2018/01/12 - The first mass-produced book to deviate from a rectilinear format, at least in the United States, is thought to be this 1863 edition of Red Riding Hood, cut into the shape of the protagonist herself with the troublesome wolf curled at her feet. Produced by the Boston-based publisher Louis Prang, this is the first in their “Doll Series”, a set of five “die-cut” books, known also as shape books — the other titles being Robinson Crusoe, Goody Two-Shoes (also written by Red Riding Hood author Lydia Very), Cinderella, and King Winter. An 1868 Prang catalogue would later claim that such “books in the shape of a regular paper Doll… originated with us”.  It would seem the claim could also extend to die cut books in general, as we can’t find anything sooner, but do let us know in the comments if you have further light to shed on this! Such books are, of course, still popular in children’s publishing today, though the die cutting is not now limited to mere outlines, as evidenced in a beautiful 2014 version of the same Little Red Riding Hood story. The die cut has also been employed in the non-juvenile sphere as well, a recent example being Jonathan Safran Foer’s ambitious Tree of Codes. As for this particular rendition of Charles Perrault’s classic tale, the text and design is by Lydia Very (1823-1901), sister of Transcendentalist poet Jones Very. The gruesome ending of the original — which sees Little Red Riding Hood being gobbled up as well as her grandmother — is avoided here, the gore giving way to the less bloody aims of the morality tale, and the lesson that one should not disobey one’s mother. "
    }, {
    "id": 29,
    "url": "http://localhost:4000/jekyll/tutorial/2018/01/12/press-and-education/",
    "title": "Press and education",
    "body": "2018/01/12 - Even the press, the classroom, the platform, and the pulpit in many instances do not give us objective and unbiased truths. To save man from the morass of propaganda, in my opinion, is one of the chief aims of education. Education must enable one to sift and weigh evidence, to discern the true from the false, the real from the unreal, and the facts from the fiction. Education must also train one for quick, resolute and effective thinking. To think incisively and to think for one’s self is very difficult.  We are prone to let our mental life become invaded by legions of half truths, prejudices, and propaganda. At this point, I often wonder whether or not education is fulfilling its purpose. A great majority of the so-called educated people do not think logically and scientifically. The function of education, therefore, is to teach one to think intensively and to think critically. But education which stops with efficiency may prove the greatest menace to society. The most dangerous criminal may be the man gifted with reason, but with no morals. The late Eugene Talmadge, in my opinion, possessed one of the better minds of Georgia, or even America. Moreover, he wore the Phi Beta Kappa key. By all measuring rods, Mr. Talmadge could think critically and intensively; yet he contends that I am an inferior being. Are those the types of men we call educated? We must remember that intelligence is not enough. Intelligence plus character–that is the goal of true education. The complete education gives one not only power of concentration, but worthy objectives upon which to concentrate. The broad education will, therefore, transmit to one not only the accumulated knowledge of the race but also the accumulated experience of social living. "
    }, {
    "id": 30,
    "url": "http://localhost:4000/jekyll/tutorial/2018/01/12/options-for-creating-new-site-with-jekyll/",
    "title": "Options for creating a new site with Jekyll",
    "body": "2018/01/12 - jekyll new &lt;PATH&gt; installs a new Jekyll site at the path specified (relative to current directory). In this case, Jekyll will be installed in a directory called myblog. Here are some additional details:  To install the Jekyll site into the directory you’re currently in, run jekyll new . If the existing directory isn’t empty, you can pass the –force option with jekyll new . –force.  jekyll new automatically initiates bundle install to install the dependencies required. (If you don’t want Bundler to install the gems, use jekyll new myblog --skip-bundle. ) By default, the Jekyll site installed by jekyll new uses a gem-based theme called Minima. With gem-based themes, some of the directories and files are stored in the theme-gem, hidden from your immediate view.  We recommend setting up Jekyll with a gem-based theme but if you want to start with a blank slate, use jekyll new myblog --blank To learn about other parameters you can include with jekyll new, type jekyll new --help. "
    }, {
    "id": 31,
    "url": "http://localhost:4000/jekyll/2018/01/12/never-stopped-worrying-never-loved-bomb/",
    "title": "Never stopped worrying or loving the bomb",
    "body": "2018/01/12 -  I’ve been through fire and water, I tell you! From my earliest pebblehood the wildest things you could imagine have been happening to this world of ours, and I have been right in the midst of them. So begins Hallam Hawksworth’s The Strange Adventures of a Pebble. Written in the 1920s, the book was part of a series which also included The Adventures of a Grain of Dust and A Year in the Wonderland of Trees, all of which were supposed to introduce children to the world of Natural Sciences. In each of them, Hawksworth personifies the natural object he is exploring, and using a mixture of folk tales, scientific facts and colloquial, friendly explanations guides the reader through the history of the natural world. It’s a real thrill of a ride, dramatizing the life cycle of supposedly dull things. The Adventures of a Grain of Dust begins even more loudly than Pebble: I don’t want you to think that I’m boasting, but I do believe I’m one of the greatest travellers that ever was; and if anybody, living or dead, has ever gone through with more than I have I’d like to hear about it. Hallam Hawksworth was the pen-name of teacher Francis Blake Atkinson. He was married to the author Eleanor Stackhouse Atkinson, author of the children’s classic Greyfriars Bobby, which was based on the (supposedly) true story of a Scottish dog who spent fourteen years guarding his masters grave. The couple were both committed to education and published a weekly magazine for Chicago high school students called The Little Chronicle, as well as working for Encyclopaedia companies later in life. "
    }, {
    "id": 32,
    "url": "http://localhost:4000/jekyll/tutorial/web%20development/2018/01/12/is-intelligence-enough/",
    "title": "External Featured Image",
    "body": "2018/01/12 - Education must also train one for quick, resolute and effective thinking. To think incisively and to think for one’s self is very difficult.  We are prone to let our mental life become invaded by legions of half truths, prejudices, and propaganda. At this point, I often wonder whether or not education is fulfilling its purpose. A great majority of the so-called educated people do not think logically and scientifically. Even the press, the classroom, the platform, and the pulpit in many instances do not give us objective and unbiased truths. To save man from the morass of propaganda, in my opinion, is one of the chief aims of education. Education must enable one to sift and weigh evidence, to discern the true from the false, the real from the unreal, and the facts from the fiction. The function of education, therefore, is to teach one to think intensively and to think critically. But education which stops with efficiency may prove the greatest menace to society. The most dangerous criminal may be the man gifted with reason, but with no morals. The late Eugene Talmadge, in my opinion, possessed one of the better minds of Georgia, or even America. Moreover, he wore the Phi Beta Kappa key. By all measuring rods, Mr. Talmadge could think critically and intensively; yet he contends that I am an inferior being. Are those the types of men we call educated? We must remember that intelligence is not enough. Intelligence plus character–that is the goal of true education. The complete education gives one not only power of concentration, but worthy objectives upon which to concentrate. The broad education will, therefore, transmit to one not only the accumulated knowledge of the race but also the accumulated experience of social living. "
    }, {
    "id": 33,
    "url": "http://localhost:4000/jekyll/tutorial/2018/01/11/quick-start-guide/",
    "title": "Let's test spoilers",
    "body": "2018/01/11 - Director Roland Suso Richter’s enigmatic psychological thriller (direct to video/DVD) was based upon screenwriter Michael Cooney’s own play “Point of Death” - a title that gave away the film’s entire plot twist premise. As in many similar films, such as Jacob’s Ladder (1990), Soul Survivors (2001), and The Butterfly Effect (2004), events and people were thoroughly distorted and confused because the protagonist was at the point of death. The tagline was misleading: “When You Don’t Have a Memory, How Can You Remember Who to Trust?” The mind-warping film opened with a hospital patient Simon Cable (Ryan Phillippe) awakening in a hospital with little knowledge (amnesia perhaps?) of what had happened, and why he was there, etc. He was told by attending Dr. Jeremy Newman (Stephen Rea) that it was July 29, 2002 (Simon thought it was the year 2000 - he was confused - he heard a doctor say 20:00 hours!) and that he had died for two minutes from cardiac arrest following the near-fatal accident – but he had been revived (“You’re as good as new”). Dr. Newman: “Simon, this is the 29th of July. The year is 2002. And your wife, whose name is Anna, is waiting outside. ” (The doctor left off four crucial additional words, revealed in the film’s ending. ) (Spoiler: Simon had died and was not resuscitated!). A major clue to everything that truly happened was the scene that played next under the credits - hospital staff failed to bring a patient back to life with a defibrillator after a car accident. Chest compressions failed and there was no pulse. A second major clue was provided by hospital orderly Travis (Stephen Graham): Everybody dies. No mystery there. But why and how everyone dies. Now, there’s a mystery worth solving. Probably the biggest mystery there is. So how do we do spoilers?: &lt;span class= spoiler &gt;My hidden paragraph here. &lt;/span&gt;"
    }, {
    "id": 34,
    "url": "http://localhost:4000/jekyll/tutorial/2018/01/11/customer-service/",
    "title": "Inception Movie",
    "body": "2018/01/11 - Review products, books, movies, restaurant and anything you like on your Jekyll blog with Mediumish! JSON-LD ready for review property. How to use?: It’s actually really simple! Add the rating in your YAML front matter. It also supports halfs: ---layout: posttitle:  Inception Movie author: johncategories: [ Jekyll, tutorial ]tags: [red, yellow]image: assets/images/11. jpgdescription:  My review of Inception movie. Actors, directing and more.  rating: 4. 5---"
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p>Search results for '" + term + "'</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>No results found...</li>";
        }
    }
    return false;
}

function lunr_search(term) {
    $('#lunrsearchresults').show( 400 );
    $( "body" ).addClass( "modal-open" );
    
    document.getElementById('lunrsearchresults').innerHTML = '<div id="resultsmodal" class="modal fade show d-block"  tabindex="-1" role="dialog" aria-labelledby="resultsmodal"> <div class="modal-dialog shadow-lg" role="document"> <div class="modal-content"> <div class="modal-header" id="modtit"> <button type="button" class="close" id="btnx" data-dismiss="modal" aria-label="Close"> &times; </button> </div> <div class="modal-body"> <ul class="mb-0"> </ul>    </div> <div class="modal-footer"><button id="btnx" type="button" class="btn btn-danger btn-sm" data-dismiss="modal">Close</button></div></div> </div></div>';
    if(term) {
        document.getElementById('modtit').innerHTML = "<h5 class='modal-title'>Search results for '" + term + "'</h5>" + document.getElementById('modtit').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><small><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></small></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>Sorry, no results found. Close & try a different search!</li>";
        }
    }
    return false;
}
    
$(function() {
    $("#lunrsearchresults").on('click', '#btnx', function () {
        $('#lunrsearchresults').hide( 5 );
        $( "body" ).removeClass( "modal-open" );
    });
});