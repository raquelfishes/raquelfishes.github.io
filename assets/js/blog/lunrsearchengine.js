
var documents = [{
    "id": 0,
    "url": "https://raquelfishes.github.io/404.html",
    "title": "error_404",
    "body": " Sorry the Page you are looking for doesnot exist ! : Back to Home "
    }, {
    "id": 1,
    "url": "https://raquelfishes.github.io/about",
    "title": "About",
    "body": ""
    }, {
    "id": 2,
    "url": "https://raquelfishes.github.io/blog/categories",
    "title": "Categories",
    "body": ""
    }, {
    "id": 3,
    "url": "https://raquelfishes.github.io/contact/",
    "title": "Contact",
    "body": ""
    }, {
    "id": 4,
    "url": "https://raquelfishes.github.io/",
    "title": "",
    "body": ""
    }, {
    "id": 5,
    "url": "https://raquelfishes.github.io/gallery/",
    "title": "Gallery",
    "body": "&lt;div class= col-lg-8 offset-md-2 &gt; &lt;div class= row &gt;&lt;div class= row &gt; &lt;div class= card &gt;  &lt;div class= card-title &gt; Mountains&lt;/div&gt;  &lt;div class= row &gt;  &lt;a href= https://raquelfishes. github. io/gallery/mountains. html &gt;   &lt;img class= img-thumbnail  alt= Mountains  src= https://raquelfishes. github. io/assets/img/gallery/mountains/1-thumbnail. jpg  /&gt;  &lt;/a&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/div&gt; "
    }, {
    "id": 6,
    "url": "https://raquelfishes.github.io/blog/",
    "title": "Blog",
    "body": ""
    }, {
    "id": 7,
    "url": "https://raquelfishes.github.io/get-started/",
    "title": "Get Started",
    "body": "Getting Started - How to use “devlopr-jekyll” theme: What’s Jekyll ?: If you aren’t familiar with Jekyll yet, you should know that it is a static site generator. It will transform your plain text into static websites and blogs. No more databases, slow loading websites, risk of being hacked…just your content. And not only that, with Jekyll you get free hosting with GitHub Pages! If you are a beginner we recommend you start with Jekyll’s Docs. Now, if you know how to use Jekyll, let’s move on to using this theme in Jekyll: Steps to create your blog using devlopr-jekyll and Host using Github Pages ::  Step 1.  Fork the repo - click here  Step 2. Use your-github-username. github. io as the new repo ( Replace your-github-username with yours). Remember if you use the name other than your-github-username. github. io , your blog will be built using gh-pages branch.   Step 3. Clone the new repo locally to make changes :   $ git clone https://github. com/yourusername/yourusername. github. io $ cd yourusername. github. io $ code .  Step 4. Open the files using VSCode and edit _config. yml and edit with your details:  _config. yml file - replace with your own details _posts - Add your blog posts here _includes - You can replace the contents of the files with your data. (contains widgets) _assets/img - Add all your images here  Step 5 - Install the development requirements: Set up local development environment:  Git Ruby and Bundler VSCodeWe need ruby and bundler to build our site locally. After installation check if its working: For ruby : $ ruby -vruby 2. 5. 1p57 (2018-03-29 revision 63029) [x86_64-linux-gnu]For bundler : $ gem install bundler$ bundler -vBundler version 2. 1. 4Add jekyll : $ bundle add jekyllThis command will add the Jekyll gem to our Gemfile and install it to the . /vendor/bundle/ folder. You can check the jekyll version $ bundle exec jekyll -vjekyll 4. 0. 0 Step 6. Install the gem dependencies by running the following command $ bundle update$ bundle install Step 7. Serve the site locally by running the following command below: $ bundle exec jekyll serve --watchor you can also serve using : $ jekyll serveVisit http://localhost:4000 for development server  Adding Content: Start populating your blog by adding your . md files in _posts. devlopr-jekyll already has a few examples. YAML Post Example:: ---layout: posttitle: Sample Postauthor: Sujay Kundudate: '2019-05-21 14:35:23 +0530'category:    - jekyllsummary: This is the summary for the sample postthumbnail: sample. png---Hi ! This is sample post. YAML Page Example:: ---layout: pagetitle: Sample Pagemenus: headerpermalink: /sample-page/---Hi ! This is sample page. Editing stylesheet: You’ll only work with a single file to edit/add theme style: assets/css/main. scss. Deploy your Changes: Once happy with your blog changes. Push your changes to master branch.  Step 8. Push Your Local Changes $ git add . $ git commit -m  my new blog using devlopr-jekyll  $ git push origin masterVisit your Github Repo settings ! Enable master branch as Github Pages Branch :  Step 9. Deploy your Blog :  Congrats ! On your new shining Blog ! You can visit the blog using http://your-github-username. github. io. "
    }, {
    "id": 8,
    "url": "https://raquelfishes.github.io/gallery/mountains.html",
    "title": "Mountains",
    "body": "{% include gallery-layout. html gallery=site. data. galleries. mountains %} "
    }, {
    "id": 9,
    "url": "https://raquelfishes.github.io/search",
    "title": "Search",
    "body": ""
    }, {
    "id": 10,
    "url": "https://raquelfishes.github.io/shop/",
    "title": "Shop",
    "body": ""
    }, {
    "id": 11,
    "url": "https://raquelfishes.github.io/styleguide/",
    "title": "Styleguide",
    "body": " devlopr jekyll - Styleguide  Lets try the different text styles  Bold , Strong , Emphasis , Italic  Now, lets try different heading styles :  Hello in h1 ! Hello in h2 ! : Hello in h3 ! : Hello in h4 ! : Hello in h5 ! Hello in h6 ! Unordered List  List Item 1 List Item 2 List Item 3 List Item 4 List Item 5 Ordered List  List Item 1 List Item 2 List Item 3 List Item 4 List Item 5 This is a Block Quote, It can Expand Multiple Lines You can use the mark tag to highlight text.  This line of text is meant to be deleted text  This line of text will render as underlined This line of text is meant to be treated as fine print. This line rendered as bold text. This line rendered as italicized text. attr HTML             #     Heading     Heading     Heading     Heading     Heading     Heading     Heading     Heading     Heading                   1     Cell     Cell     Cell     Cell     Cell     Cell     Cell     Cell     Cell             2     Cell     Cell     Cell     Cell     Cell     Cell     Cell     Cell     Cell             3     Cell     Cell     Cell     Cell     Cell     Cell     Cell     Cell     Cell           YouTube Responsive Embed: Vimeo Responsive Embed: TED Responsive Embed: Twitch Responsive Embed: SoundCloud Embed: CodePen Embed: Syntax Highlighting: 'use strict';var markdown = require('markdown'). markdown;function Editor(input, preview) { this. update = function() {  preview. innerHTML = markdown. toHTML(input. value); }; input. editor = this; this. update();}You can add inline code just like this, E. g. . code { color: #fff; } pre { background-color: #f4f4f4; max-width: 100%; overflow: auto;}GitHub gist Embed: Input Style:  Twitter Embed : I just published “Deploying a blog using Jekyll and Github Pages with SSL certificate for Free” https://t. co/B3T3IQVU93 &mdash; Sujay Kundu (@SujayKundu777) June 29, 2018 Instagram Embed :  A post shared by Ahmad Ajmi (@ahmadajme) on Apr 2, 2018 at 2:18pm PDT "
    }, {
    "id": 12,
    "url": "https://raquelfishes.github.io/robots.txt",
    "title": "",
    "body": "      Sitemap: {{ “sitemap. xml”   absolute_url }}   "
    }, {
    "id": 13,
    "url": "https://raquelfishes.github.io/blog/git_config",
    "title": "Todos los secretos para configurar Git",
    "body": "2021/01/21 - El ordenador (a lo que añadiría los repositorios) nacieron para resolver problemas que antes no existían. Bill Gates¿Cuántas veces has subido algo a un repositorio con el usuario que no deberías? ¿Quieres cambiar tu configuración de Git? ¿No sabes dónde se guarda la configuración o cómo consultarla? Si es así este artículo es para tí, así podrás amplicar los conocimientos para trabajar con repositorios Git. Así que, ¡allá vamos! Configuración de git: Son muchas las opciones que tenemos para configurar nuestra consola de Git desde el usuario hasta el editor que queremos usar por defecto, y eso mismo lo podemos configurar para un repositorio concreto o entorno local, y para configurarlo a nivel genérico o global. Toda nuestra configuración de Git se puede modificar y consultar a través de la herramienta git config y añadir los flags que queramos en concreto para obtener y establer las variables de configuración que controlan el aspecto y funcionamiento de Git. Toda la documentación oficial sobre la configuración de Git puedes encontrarla en su página oficial Dónde se guarda esa configuración y cómo la consulto: Hay varios niveles de configuración en Git: sistema, global, local y worktree, los cuales se corresponden con cada uno de los entornos en los que podemos configurar nuestra relación con Git. Cada una de estas configuraciones se guarda en un fichero diferente y vamos “pisando” la configuración de los entornos más genéricos a los más específicos. La lista ordenada de la configuración más general a la más específica es la siguiente con el path correspondiente a su archivo de configuración y el comando de git para consultar la configuración de ese fichero:  System: [directorio_instalacion_git]/etc/gitconfig $ git config --system --list Global: [HOME]/. gitconfig $ git config --global --list Local: [repositorio_git]/. git/config $ git config --local --list Worktree: [repositorio_git]/. git/config. worktree $ git config --worktree --listDonde normalmente los paths serán:  [directorio_instalación_git]     Windows: C:/Program Files/Git/   Linux: ~etc/    [HOME]     Windows: C:/Users/[username]   Linux: ~home/[username] o ~root/   No te preocupes si no encuentras alguno de los ficheros Git no los genera hasta que no son referenciados por primera vez Si quieres ver de qué fichero está cogiendo qué configuración en cada momento puedes usar el siguiente comando el cual muestra el fichero y qué configuración aplica con algunos ejemplos de lo que puede salir. Como puedes ver en el ejemplo el editor aprece en la configuracion del sistema y global, y el usuario en la global y local. $ git config --list --show-originfile:C:/Program Files/Git/etc/gitconfig core. editor= C:\\Program Files\\Sublime Text 3\\sublime_text. exe . . . file:C:/Users/Fishes/. gitconfig user. name=Raquelfile:C:/Users/Fishes/. gitconfig core. editor=vim. . . file:. git/config    user. name=Rachel. . . Y por último si quieres ver o modificar uno de esos ficheros directamente tienes el comando edit, para cada uno de los entornos. $ git config --system --edit$ git config --global --edit$ git config --local --edit$ git config --worktree --editRecuerda, que las configuraciones más específicas van a sobreescribir las más genéricas. ¿Qué configuro primero? El usuario: Si ves muchas cosas que no entiendes, y te lias con tanta configuración, no te preocupes. La mayoría lo usarás por defecto. Lo primero es lo primero, a configurar tu usuario, si no tienes usuario no vas a poder hacer ni un commit. Así que vamos a configurar el nombre de usuario y correo electrónico a nivel global y no te preocupes esta información no va a parar a ninguna lista de correo ni nada, se tratará como metadatos para identificar tus cambios en el repositorio Git. Puedes modificar la configuración tanto por ficheros o por consola de comandos, yo prefiero la segunda opción. $ git config --global user. name raquel$ git config --global user. email example@example. comPero a mi también me resulta muy útil configurar el usuario a nivel local, por ejemplo para repositorios de trabajo en los que ya tengo una configuración diferente a nivel global y no quiero tocarla, sólo tendría que cambiar el flag de global a local. $ git config --local user. name Raquel$ git config --local user. email company@company. comSi tienes dudas, siempre puedes comprobar el valor de un clave específica de la configuración ejecutando git config &lt;clave&gt; $ git config user. nameRaquel$ git config user. emailexample@example. comY adiós a subir cambios con usuarios equivocados. ¿Qué más puedo configurar? El editor: Ahora que ya tenemos configurada la identidad del usuario, también puedes elegir el editor de texto por defecto que se utilizará cuando Git necesite que introduzcas un mensaje. Ten en cuenta que si no indicas nada, Git usará el editor por defecto del sistema, que generalmente es Vim. Puedes seleccionar tanto los que vienen preinstalados en el sistema como el que tú suelas utilizar, por ejemplo Sublime o NotePad++, y al igual que antes puedes cambiarlo para los diferentes niveles, aunque yo recomiendo hacerlo a nivel global. Te dejo aquí los comandos correspondientes       Atom   git config –global core. editor  atom wait        emacs   git config –global core. editor  emacs        Textmate   git config –global core. editor  mate –w        Vim   git config –global core. editor  vim        Sublime   git config –global core. editor  'C:\\Program Files\\Sublime Text 3\\sublime_text. exe' -w        NotePad++   git config –global core. editor  'C:/Program Files/Notepad++/notepad++. exe' -multiInst -notabbar -nosession -noPlugin    Quiero eliminar mi configuración: Para borrar una configuración de git, hay que usar el comando unset. $ git config --global --unset core. editorEs probable, que por error tengamos puesta una configuración dos veces y que el comando anterior de error. Para esos casos tenemos otro comando más potente unset-all, con él se eliminarán todas las líneas que coincidan con la clave indicada $ git config --global --unset-all core. editor¿Y ahora qué?: Aún hay muchos más comandos y trucos, por lo que intentaré compartir algunos de los comandos que más útiles me resultan a mi en mi día a día. Mientras espero que este artículo os haya resultado útil. Ahora, ¡a divertirse! ¡Gracias por leer!=) "
    }, {
    "id": 14,
    "url": "https://raquelfishes.github.io/blog/github_pages-jekyll",
    "title": "¡Mejora tu web gratis en Github Pages con Jekyll!",
    "body": "2021/01/14 - Jekyll hace lo que se le dice que haga, ni más, ni menos. No intenta suplantar a los usuarios con suposiciones atrevidas, ni les agobia con complejidad y configuración innecesaria. Dicho de forma simple, se aparta de tu camino y te permite concentrarte en aquello que realmente importa: su contenido. Si ya tienes creada tu web en Github Pages pero no quieres o no sabes mucho de CSS, pero quieres mejorar la apariencia visual de tu web, ¡puedes probar un tema de Jekyll! Este artículo es una continuación de otro anterior para crear tu web gratis con Github Pages. Dónde explico como crear tu página personal, usando un repositorio. Así que, ¡allá vamos! Ya tengo mi web, pero como hacerla más interesante: Existen temas creados que puedes usar para hacer que tu página tenga una mejor apariencia con muy poco esfuerzo. ¡Jekyll y Github harán todo el trabajo por ti! Tú simplemente tendrás que pulsar un par de botones. Pero primero… ¿Qué es Jekyll?: Jekyll es un generador para sitios web estáticos, es decir, el sitio se sube al repositorio tal cual es y se muestra igual a todos los usuarios. Es muy simple de utilizar y tiene capacidades para crear un blog. Muy adecuado para sitios web personales, proyectos u organizaciones. Jekyll fue escrito en lenguaje Ruby por Tom Preston-Werner en 2008, el cofundador de Github y es por esto por lo que la integración con la plataforma es muy buena. Además se trata de un proyecto de software libre, puesto que se distribuye bajo la licencia MIT. En lugar de usar bases de datos, Jekyll coge el texto escrito en los formatos Markdown o Liquid y usa el layout para generar el sitio web. Aunque te parezca que la palabra estático te va a suponer un problema para escalar tu web, en el fondo Jekyll es muy flexible y admite contextos frontend como Bootstrap, semantic y mucho más. Si quieres saber un poco más, te recomiendo que le eches un vistazo a su web oficial o a la documentacion de Github Pages y Jekyll Ya sé lo que és, vamos a continuar: Si ya has realizado la primera parte del tutorial y has seguido los pasos sobre cómo Crear tu web gratis con Github Pages o ya tienes tu web creada. Ve a “GitHub Pages”, sección “Settings” y haz click en “Choose a theme. ” Ahí podrás ver una selección de temas, puedes escoger el que más te guste: Veamos como queda nuestra antigua web, seleccionando una de las plantillas, para ello, elige la que más te guste y haz click en “Select theme”: Y con solo unos clicks de esfuerzo, y un tiempo para que se actualice, ¡ya tenemos algo mucho mejor! Con esto puedes crear tu propia web para tu negocio, blog o portfolio, el cual estaría alojado en un repositorio de Github, y estaría online totalmente gratis. ¡Ya tienes tu ventana al mundo! ¿Y ahora qué?: Si te fijas en los ficheros de tu repositorio, podrás ver que ha aparecido uno de ellos llamado _config. yml. Aquí tienes toda la información del tema y su configuración. Si quieres puedes echarle un ojo y ver todas las opciones que puedes añadir ahí. Hay muchos temas que puedes probar, uno de ellos para empezar, y de los más simples es Jekyll Now con un blog ya pre-configurado. Si te arrepientes de haber añadido un tema y quieres dejar tu web tal y como estaba, siempre puedes eliminar el fichero de configuración. Puedes probar los temas que hay en github o descargar y comprar de otros sitios, como de la propia página de temas de Jekyll para Github Esto es sólo el principio: Jekyll no sólo te sirve para ponerle un tema y ya está, al igual que WordPress tiene multitud de temas y plugins para ampliar su funcionalidad con los que podras añadir y hacer una web tan completa como en la que estas leyendo esto. Como en todo, el límite eres tú y tu tiempo. Ahora, ¡a divertirse! ¡Gracias por leer!=) "
    }, {
    "id": 15,
    "url": "https://raquelfishes.github.io/blog/github_pages",
    "title": "¡Crea tu web gratis con Github Pages!",
    "body": "2021/01/07 - Github Pages permite convertir cualquier repositorio en una página web con solo un par de clicks. Si estás buscando un lugar en el que crear tu portfolio con proyectos personales o de trabajo, o si quieres crear tu blog o web de empresa y no sabes por donde empezar, quizá este sea tu sitio. Es probable que no quieras pagar por un servicio de hosting, dominio y todo lo que implica tener tu web “en el aire”. Entonces este post es para ti. ¿Por qué debería tener una web?: La verdad es que en el mundo en el que vivimos, es difícil imaginar que podría no beneficiarte de tener tu propia web. Puedes querer mostrar tu portfolio a futuras empresas o como freelance. Mostrar tus proyectos de estudiante y compartirlos con la comunidad universitaria. Puedes querer tener tu propio blog donde contar los lugares que te gustan o qué estás haciendo. También puedes querer hacer publicidad o compartir tu negocio y abrirte a la venta online… Una página web es el modo de conectarte con el mundo y una gran herramienta de comunicación. Es el modo de crear, construir y controlar tu imagen online. Además cuanto menos tiempo gastes en consstruir esa web, más tiempo tendrás para construir tu imagen y llegar a la gente que te interesa. Una web, puede ayudarte a alcanzar y superar a tus competidores. Y, todos sabemos que no es lo más sencillo de crear si no sabes lo que estás haciendo. Si estás empezando a informarte sobre como crear tu propia web, seguro que has oído hablar de algunas de las opciones mas sencillas, por un lado está Wordpress, pero yo quiero presentarte a Github. Wordpress es la herramienta para principiantes por excelencia, para los que sólo quieren configurar algunos parámetros y escribir. Es una gran herramienta para las personas que quieren una web rápida sin tener ningún conocimiento técnico. El problema con Wordpress es que su plan gratuito no te deja configurar prácticamente nada. Es demasiado obvio que estamos usando Wordpress en nuestra página, tienes el logo de wordpress en todas las páginas, la direccion acaba con wordpress. com y las plantillas y personalización es mínima. Si eres una persona un poco técnica seguro que conocerás Github como gestor de repositorio de código. Si eres una persona técnica que le gusta programar y tener sus proyectos en un mismo sitio seguro que tienes una cuenta de Github, con al menos un proyecto. Lo que puede que no conozcas es la funcionalidad de Github Pages, por qué no crear tu web en Github y alojarla directamente ahí, en tu repositorio, sin necesitar nada más. Si quieres mantener el código de tu web en secreto, quizá este artículo debería acabar aquí para ti. Si por el contrario te gusta colaborar con la filosofía de Código Libre y ayudar e inspirar a todos los que vengan detrás de ti. Esa es la gran idea de Github, compartir tu conocimiento y trabajo. Cuando tu compartes tus proyectos en Github, la gente puede ver tu código, ver qué haces y cómo lo haces, e incluso sugerirte mejoras. Sería la gran biblioteca del código hoy en día. La mayoría de las personas técnicas ya usan Git y/o Github de algún modo. Tener tu web en el mismo sitio es un plus, y además ayudará a subir las contribuciones en tu perfil =) Si eres totalmente nuevo a todo lo que estoy contando, quizá deberías echar un vistazo a “Comenzar con Git y Github: Guía completa para novatos” En ese artículo puedes aprender lo básico de Git y Github, conceptos como “repositorio” o “rama”. De aquí en adelante asumiré que conoces lo básico. Empecemos con nuestra web: Hay dos modos de empezar tu página web. Puede que comiences totalmente desde cero, no tienes nada, ni index. hmtl. O puedes tener una web o plantilla html ya creada, pero no sabes como subirla a Github y así poder tenerla online de forma gratuita. Ya tengo los ficheros de mi web, pero no sé qué hacer con ellos: Este es el caso más sencillo. Github hace todo el trabajo por ti. Asumiendo que ya tienes una cuenta de Github y que sabes lo que es un repositorio, sino, deberías echar un vistazo a mi anterior artículo sobre como empezar con Git y Github. Digamos que nuestro repositorio será como el cascarón de un huevo, es donde nuestro proyecto vivie. Ahí puedes organizarlo por carpetas, añadir imagenes, videos, cualquier cosa que tu proyecto necesite puede estar en el repositorio. Si todavía no lo has hecho, inicializa tu proyecto con un repositorio, o puedes crear un repositorio y añadir tus ficheros. Si en el directorio raíz ya tienes un fichero llamado index. html Github sabrá perfectamente qué hacer. Ahora vas a aprender a aprovecharte de Github Pages. Tienes que ir a tu repositorio de Github y hacer click en Settings Una vez que estamos en la página de configuración hay que hacer scroll en la página hacia abajo hasta llegar a la seccion de Github Pages Ahora desplega el menú de Source y selecciona la opción de Master branch. Esto hará que nuestra página tome como rama para mostrar nuestra página principal la rama master del repositorio, que sería como la rama principal por defecto del repositorio. En este caso verás una notificacion como que tu sitio está listo para ser publicado. Sé paciente, puede tomar un par de minutos, entonces refresca la página y verás que la notificación ha cambiado y te dice que tu página ya ha sido publicada con la direccion web en la que podrás ver tu página. Prueba a hacer click en el link y ¡MAGIA! ¡¡Ya tienes tu web gratis publicada!! No sé ni por donde empezar: No voy a explicar como hacer una web, ni las diferentes librerias de diseño que puedes usar, sino que me voy a enfocar en lo básico. Prefiero que conozcas como crear algo de cero usando la herramienta que estoy presentando aquí y que con todo el tiempo que dispongas y las ganas que le pongas explores todo este mundo de diseño y programación web. Lo que voy a explicar aquí es como si eres totalmente nuevo crear una web en Github Pages. Lo primero vamos a crear un repositorio Rellena los datos de tu repositorio, nombre, descripcion y selecciona la opción de inicializiar el repositorio con un README Initialize this repository with a README y entonces dile que lo cree Create repository Ahora al igual que en la sección anterior tienes que ir a Settings, cerca de la parte alta de la página al lado derecho de la pantalla Una vez que estés aquí, haz scroll en la página hacia abajo hasta llegar a la sección de Github Pages Ahora desplega el menú de Source y selecciona la opción de Master branch. Esto hará que nuestra página tome como rama para mostrar nuestra página principal la rama master del repositorio, que sería como la rama principal por defecto del repositorio. En este caso verás una notificacion como que tu sitio está listo para ser publicado. Sé paciente, puede tomar un par de minutos, entonces refresca la página y verás que la notificación ha cambiado y te dice que tu página ya ha sido publicada con la direccion web en la que podrás ver tu página. Ahora haz click en el link y podrás ver tu página. ¡Enhorabuena! ¡Ya estás online! ¿Pero esto no es un poco feo?: Te doy la razón, esta web es un poco bastante fea, si vuelves a tu repositorio podrás ver que lo que se está mostrando es lo que hay en tu fichero README. md. Si quieres hacer algunos cambios, puedes ir a la parte de arriba y editar tu fichero, para editar lo que quieres que la gente vea. Para hacer esto, vuelve al repositorio, haz click en el icono del lapiz que puedes encontrar en el fichero README y modíficalo a tu antojo. Una vez que hayas acabado de modificar el fichero README, no te olvides de hacer commit del archivo. Si no lo haces perderás todo el trabajo. Aquí también puedes añadir un pequeño mensaje de commit para explicar los cambios que has hecho. Ten en cuenta que estás modificando un fichero de tipo Markdown. Si no sabes mucho sobre este formato, puedes dirigirte a este enlace para ver la de opciones que te ofrece. Este tipo de ficheros es en realidad un lenguaje de programación, este post está escrito en formato Markdown, donde puedes añadir el formato de los elementos mientras escribes en texto plano. Incluye funcionalidades para añadir texto, links, imágenes, colores e incluso formato de código. Aquí puedes encontrar la Guía Gásica de la sintaxis de Markdown ¡Ahora vuelve a tu web, y comprueba como queda con los últimos cambios! Ten en cuenta que a veces puede tomar varios minutos hasta que los cambios aparecen en la web publicada. También puedes tener algunos problemas con la cache de tu navegador, borrar la cache del navegador o abrir el enlace en un navegador con sesión oculta puede ayudar a ver los cambios antes. ¿No se puede hacer nada mejor?: Pues sí, sí se puede hacer mejor, a partir de aquí se pone interesante. Pero eso lo explicaré en otro post en el que os presentare Jekyll, framework con el que he creado yo esta página. Mientras espero que este tutorial os haya servido para abrir el apetito. Ahora, ¡a divertirse! ¡Gracias por leer!=) "
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p>Search results for '" + term + "'</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>No results found...</li>";
        }
    }
    return false;
}

function lunr_search(term) {
    $('#lunrsearchresults').show( 400 );
    $( "body" ).addClass( "modal-open" );
    
    document.getElementById('lunrsearchresults').innerHTML = '<div id="resultsmodal" class="modal fade show d-block"  tabindex="-1" role="dialog" aria-labelledby="resultsmodal"> <div class="modal-dialog shadow-lg" role="document"> <div class="modal-content"> <div class="modal-header" id="modtit"> <button type="button" class="close" id="btnx" data-dismiss="modal" aria-label="Close"> &times; </button> </div> <div class="modal-body"> <ul class="mb-0"> </ul>    </div> <div class="modal-footer"><button id="btnx" type="button" class="btn btn-danger btn-sm" data-dismiss="modal">Close</button></div></div> </div></div>';
    if(term) {
        document.getElementById('modtit').innerHTML = "<h5 class='modal-title'>Search results for '" + term + "'</h5>" + document.getElementById('modtit').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><small><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></small></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>Sorry, no results found. Close & try a different search!</li>";
        }
    }
    return false;
}
    
$(function() {
    $("#lunrsearchresults").on('click', '#btnx', function () {
        $('#lunrsearchresults').hide( 5 );
        $( "body" ).removeClass( "modal-open" );
    });
});